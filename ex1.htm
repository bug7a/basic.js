<!DOCTYPE html>
<html>
    <head>
        
        <title>basic.js Code Editor</title>
        
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">

        <!-- LIBRARY FILES -->
        <script src="library/src-noconflict/ace.js" type="text/javascript" charset="utf-8"></script>
        <link rel="stylesheet" type="text/css" href="basic/basic.min.css">
        <script src="basic/basic.min.js" type="text/javascript" charset="utf-8"></script>
        <script src="js/basic-editor.js" type="text/javascript" charset="utf-8"></script>

        <style>

            body {
                overflow: hidden;
            }

            .editor {
                
                position:absolute;
                margin:0px;
                border-radius: 6px;
                font-size: 11px;
                
            }

        </style>

        <script>
            
        var start = function() {

            basicEditor.create(document.getElementById("code-example").innerHTML);
            window.basicEditor = basicEditor;

        }

        </script>

    </head>
    <body>
        
<div id="code-example" style="display:none">

    

    const plantDataList = [
        { id: "1", title: "Broccoli", desc: "Vegetable", icon: "images/broccoli.png" },
        { id: "2", title: "Strawberry", desc: "Fruit", icon: "images/strawberry.png" },
        { id: "3", title: "Carrot", desc: "Vegetable", icon: "images/carrot.png" },
        { id: "4", title: "Blueberries", desc: "Fruit", icon: "images/blueberries.png" },
    ];
    let plantItemList = [];
    let boxItems;
        
    window.onload = () => {

        page.color = "whitesmoke";

        // GROUP: Autolayout centered.
        startFlexBox();

            // BOX: Fruit items container box.
            boxItems = startBox(40, 40, 300, "auto", {
                color: "white",
                round: 13,
            });

                for(let i = 0; i < plantDataList.length; i++) {

                    // PLANTITEM: Every item.
                    PlantItem(plantDataList[i]);
                    plantItemList.push(that);

                }

            endBox(); // END BoxItems

        endFlexBox(); // END Autolayout
        
    };

    // CUSTOM COMPONENT:
    const PlantItem = (params = {}) => {

        // Default values:
        const defaults = {
            width: 300,
            height: 94,
            color: "transparent",
            position: "relative",
        };

        // BOX: Component container box.
        const box = startBox();
        // Apply default values and params:
        box.props(defaults, params);

            // BOX: Item background box.
            box.boxBackground = Box(4, 2, box.width - 8, 90, {
                color: "rgba(0, 0, 0, 0.01)",
                round: 13,
                border: 1,
                borderColor: "rgba(0, 0, 0, 0.04)",
            });
            that.setMotion("background-color 0.3s");
            that.clickable = 1;
            that.elem.style.cursor = "pointer";

            // IMAGE: Item icon image.
            Icon(30, 12, 70, 70, {
                round: 4,
                color: "transparent",
                border: 0,
            });
            that.load(params.icon);

            // LABEL: Item title text.
            Label(120, 25, 280, "auto", {
                text: params.title,
            });

            // LABEL: Item description text.
            Label(120, 49, 280, "auto", {
                text: params.desc,
                textColor: "gray",
                fontSize: 14,
            });

        endBox();

        // init code:
        box.elem.addEventListener("mouseover", () => {
            box.boxBackground.color = "rgba(90, 90, 0, 0.09)";
        });

        box.elem.addEventListener("mouseout", () => {
            box.boxBackground.color = "rgba(0, 0, 0, 0.01)";
        });

        makeBasicObject(box);
        return box;

    };

</div>
        
    </body>
</html>